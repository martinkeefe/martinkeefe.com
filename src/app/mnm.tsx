import * as React from 'react'
import { StyleSheet, css } from 'aphrodite-jss'
import { App, NormalPage } from '../app'

interface MNM {
    num: string,
    title: string,
    when: string,
    date: string,
}

const MNMS: MNM[] = [
    { num: '08', title: 'Claudia’s Birthday', when: 'September 2008', date: '2016-09-17' },
    { num: '09', title: 'Minimalism and Modern Classical', when: 'October 2008', date: '2016-09-17' },
    { num: '11', title: 'Geof’s Birthday', when: 'January 2009', date: '2016-09-17' },
    { num: '14', title: '’70s Albums', when: 'April 2009', date: '2016-09-17' },
    { num: '15', title: 'Astronomy Night', when: 'May 2009', date: '2016-09-17' },
    { num: '18', title: '1969, the Shape of Things to Come', when: 'October 2009', date: '2016-09-17' },
    { num: '22', title: '2009 Retrospective', when: 'February 2010', date: '2016-09-17' },
    { num: '23', title: 'Travel Broadens the Mind', when: 'March 2010', date: '2016-09-17' },
    { num: '25', title: 'Screen Gems', when: 'June 2010', date: '2016-09-17' },
    { num: '27', title: 'Cloak & Dagger, Music for Secret Agents', when: 'August 2010', date: '2016-09-17' },
    { num: '29', title: 'The Life Aquatic', when: 'November 2010', date: '2016-09-17' },
    { num: '31', title: 'The Hazards of Love', when: 'February 2011', date: '2016-09-17' },
    { num: '33', title: 'Genetic Drift', when: 'July 2013', date: '2016-09-17' },
    { num: '34', title: 'What Becomes of the Brokenhearted', when: 'November 2013', date: '2016-09-17' },
]

const S3 = 'http://s3-eu-west-1.amazonaws.com/raiment57/'

function s3_src(mnm, i, ext) {
    const trk_num = ('0' + (i + 1)).substr(-2)
    return `${S3}mnm${mnm.num}/${trk_num}.${ext}`
}

const GTR = 18
const px = n => n+'px'

//------------------------------------------------------------------------------

interface Track {
    art_name: string,
    trk_name: string,
    trk_info?: string,
    alb_name: string,
    alb_fmt?: string,
    alb_year: string,
    xtra?: string,
}
interface MondayProps {
    match: { params: { mnm: string } }
}

function MondayPage(props: MondayProps) {
    const mnm = MNMS.find(val => val.num == props.match.params.mnm) as MNM
    const trks = require('data/mnm/mnm' + mnm.num + '.csv') as Track[]

    return (
        <NormalPage title={'Monday Night Martin - ' + mnm.title} date={mnm.date} ident="mnm">
            <h1>Monday Night Martin</h1>
            <p>Once upon a time I lugged my PC to The Star on the first Monday of each month to play lovingly created playlists
               as loudly as I could get away with accompanied by swirling visuals generated by WinAmp’s MilkDrop plugin
               projected on to a screen. This had something of a cult following for a few years.</p>
            <h2>#{mnm.num}: {mnm.title} ({mnm.when})</h2>
            <p>{trks[0].trk_name || ''}</p>
            <PlayList key={mnm.num} mnm={mnm} trks={trks.slice(1)} />
        </NormalPage>
    )
}

//------------------------------------------------------------------------------

interface ListProps {
    mnm: MNM,
    trks: Track[],
}
interface ListState {
    index: number
}

class PlayList extends React.Component<ListProps, ListState> {
    state = { index: 0 }
    audio = null
    volume = 1
    muted = false

    render() {
        const styles = StyleSheet.create({
            playlist: {
                margin: `${px(-GTR)} 0 ${px(GTR)} ${px(-GTR)}`, // gutter
                '@media (min-width: 43em)': {
                    display: 'flex',
                    flexWrap: 'wrap',
                },
            },
        })

        const items = this.props.trks.map((trk, i) => {
            const trk_num = ('0' + (i + 1)).substr(-2)
            const img = s3_src(this.props.mnm, i, 'jpg')
            const src = s3_src(this.props.mnm, i, 'mp3')

            return <PlayListItem key={trk_num}
                num={trk_num}
                trk={trk}
                src={src}
                img={img}
                volume={this.volume}
                muted={this.muted}
                active={i == this.state.index}
                onEnded={this.onEnded}
                onVolumeChange={this.onVolumeChange}
                onClick={e => this.onClick(e, i)} />
        })

        return (
            <div className={css(styles.playlist)}>
                {items}
            </div>
        )
    }

    onEnded = () => {
        this.setState(prevState => ({ index: prevState.index + 1 }))
    }

    onVolumeChange = e => {
        this.volume = e.target.volume
        this.muted = e.target.muted
    }

    onClick(e, i) {
        e.preventDefault()
        this.setState({ index: i })
    }
}

//------------------------------------------------------------------------------

interface ItemProps {
    active: boolean,
    onEnded: () => void,
    onVolumeChange: (Object) => void,
    src: string,
    onClick: (MouseEvent) => void,
    img: string,
    num: string,
    trk: Track,
    volume: number,
    muted: boolean,
}

class PlayListItem extends React.Component<ItemProps> {
    audio: React.RefObject<HTMLAudioElement> = React.createRef()

    render() {
        const { num, trk, img, src, active, onEnded, onClick, onVolumeChange } = this.props

        const styles = StyleSheet.create({
            wrapper: {
                width: '100%',
                '@media (min-width: 43em)': {
                    width: '50%',
                }
            },
            item: {
                margin: `${px(GTR)} 0 0 ${px(GTR)}`, /* gutter */
                position: 'relative',
                display: 'flex',
                '& img': {
                    width: '128px',
                    height: '128px',                            
                },
            },
            data: {
                flex: 2,
                paddingLeft: px(GTR/2),                            
                background: active ? 'blue' : 'none',
                '& p': {
                    margin: 0,
                    textAlign: 'left',
                },
            },
            audio: {
                width: '100%',
                position: 'absolute',
                left: 0,
                top: px(-GTR/2),
            },
            xtra: {
                paddingTop: '6px',
                marginLeft: px(GTR),                            
                fontSize: '16px',
                background: 'rgb(64,60,75)',
            },
        })

        const klass = 'item' + (active ? ' active' : '')
        const audio = <audio className={css(styles.audio)} controls onEnded={onEnded} onVolumeChange={onVolumeChange} src={src} ref={this.audio}></audio>
        return (
            <div className={css(styles.wrapper)}>
                <div className={css(styles.item)} onClick={onClick}>
                    <img src={img} />
                    <div className={css(styles.data)}>
                        <p><big>{num}</big></p>
                        <p><b>{trk.art_name}</b></p>
                        <p>“{trk.trk_name}” {trk.trk_info ? `(${trk.trk_info})` : ''}</p>
                        <p><i>{trk.alb_name}</i>{trk.alb_fmt ? ` [${trk.alb_fmt}],` : ','} {trk.alb_year}</p>
                    </div>
                    {active ? audio : null}
                </div>
                {active && trk.xtra
                    ? <div  className={css(styles.xtra)} dangerouslySetInnerHTML={{ __html: trk.xtra }}></div>
                    : null
                }
            </div>
        )
    }

    update() {
        if (this.props.active && this.audio) {
            this.audio.current.src = this.props.src
            this.audio.current.volume = this.props.volume
            this.audio.current.muted = this.props.muted
            // https://developers.google.com/web/updates/2017/09/autoplay-policy-changes
            const promise = this.audio.current.play()
            if (promise) {
                promise
                    .then(() => null)
                    .catch(error => console.warn(error))                
            }
        }
    }

    componentDidUpdate() {
        this.update()
    }

    componentDidMount() {
        this.update()
    }
}

//------------------------------------------------------------------------------

export default function (app: App) {
    app.add_route('/mnm/:mnm', MondayPage)

    app.add_nav({
        ident: 'mnm', text: 'Monday Night Martin', href: '/mnm/09', sub:
            MNMS.map(mnm => ({ href: '/mnm/' + mnm.num, text: `#${mnm.num}: ${mnm.title}`, ident: mnm.num }))
    })

    MNMS.forEach(mnm => {
        app.redirect('/music/mnm' + mnm.num, '/mnm/' + mnm.num)
        app.redirect('/mnm-' + mnm.num, '/mnm/' + mnm.num)
    })
}
